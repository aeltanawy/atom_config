"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _ansiToReact = require("ansi-to-react");

var TextDisplay =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(TextDisplay, _React$Component);

  function TextDisplay() {
    (0, _classCallCheck2.default)(this, TextDisplay);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TextDisplay).apply(this, arguments));
  }

  (0, _createClass2.default)(TextDisplay, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      // Calculate shouldComponentUpdate because we don't use metadata or models
      // on the plaintext transform
      return nextProps.data !== this.props.data;
    }
  }, {
    key: "render",
    value: function render() {
      return _react.default.createElement("pre", null, (0, _ansiToReact.ansiToInlineStyle)(this.props.data).map(function (bundle, key) {
        return _react.default.createElement("span", {
          style: bundle.style,
          key: key
        }, bundle.content);
      }));
    }
  }]);
  return TextDisplay;
}(_react.default.Component);

exports.default = TextDisplay;
(0, _defineProperty2.default)(TextDisplay, "MIMETYPE", "text/plain");