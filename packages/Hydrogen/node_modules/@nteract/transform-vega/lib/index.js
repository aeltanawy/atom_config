"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VegaLite = exports.VegaLite1 = VegaLite1;
exports.Vega = exports.Vega2 = Vega2;
exports.VegaLite2 = VegaLite2;
exports.Vega3 = Vega3;
exports.VegaEmbed = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _assign = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign"));

var React = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _vegaEmbedV = _interopRequireDefault(require("@nteract/vega-embed-v2"));

var _vegaEmbed = _interopRequireDefault(require("vega-embed"));

var MIMETYPE_VEGA2 = "application/vnd.vega.v2+json";
var MIMETYPE_VEGA3 = "application/vnd.vega.v3+json";
var MIMETYPE_VEGALITE1 = "application/vnd.vegalite.v1+json";
var MIMETYPE_VEGALITE2 = "application/vnd.vegalite.v2+json";
var DEFAULT_WIDTH = 500;
var DEFAULT_HEIGHT = DEFAULT_WIDTH / 1.5;

var defaultCallback = function defaultCallback() {};

function embed(el, spec, mode, version, cb) {
  if (version == "vega2") {
    var embedSpec = {
      mode: mode,
      spec: (0, _assign.default)({}, spec)
    };

    if (mode === "vega-lite") {
      embedSpec.spec.config = (0, _lodash.merge)({
        cell: {
          width: DEFAULT_WIDTH,
          height: DEFAULT_HEIGHT
        }
      }, embedSpec.spec.config);
    }

    (0, _vegaEmbedV.default)(el, embedSpec, cb);
  } else {
    spec = (0, _assign.default)({}, spec);

    if (mode === "vega-lite") {
      spec.config = (0, _lodash.merge)({
        cell: {
          width: DEFAULT_WIDTH,
          height: DEFAULT_HEIGHT
        }
      }, spec.config);
    }

    (0, _vegaEmbed.default)(el, spec, {
      mode: mode,
      actions: false
    }).then(function (result) {
      return cb(null, result);
    }).catch(cb);
  }
}

var VegaEmbed =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(VegaEmbed, _React$Component);

  function VegaEmbed() {
    (0, _classCallCheck2.default)(this, VegaEmbed);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(VegaEmbed).apply(this, arguments));
  }

  (0, _createClass2.default)(VegaEmbed, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.el) {
        embed(this.el, this.props.data, this.props.embedMode, this.props.version, this.props.renderedCallback);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.data !== nextProps.data;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.el) {
        embed(this.el, this.props.data, this.props.embedMode, this.props.version, this.props.renderedCallback);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      // Note: We hide vega-actions since they won't work in our environment
      // (this is only needed for vega2, since vega-embed v3 supports hiding
      // actions via options)
      return React.createElement(React.Fragment, null, React.createElement("style", null, ".vega-actions{ display: none; }"), React.createElement("div", {
        ref: function ref(el) {
          _this.el = el;
        }
      }));
    }
  }]);
  return VegaEmbed;
}(React.Component);

exports.VegaEmbed = VegaEmbed;
(0, _defineProperty2.default)(VegaEmbed, "defaultProps", {
  renderedCallback: defaultCallback,
  embedMode: "vega-lite",
  version: "vega2"
});

function VegaLite1(props) {
  return React.createElement(VegaEmbed, {
    data: props.data,
    embedMode: "vega-lite",
    version: "vega2"
  });
}

VegaLite1.MIMETYPE = MIMETYPE_VEGALITE1;

function Vega2(props) {
  return React.createElement(VegaEmbed, {
    data: props.data,
    embedMode: "vega",
    version: "vega2"
  });
}

Vega2.MIMETYPE = MIMETYPE_VEGA2; // For backwards compatibility

function VegaLite2(props) {
  return React.createElement(VegaEmbed, {
    data: props.data,
    embedMode: "vega-lite",
    version: "vega3"
  });
}

VegaLite2.MIMETYPE = MIMETYPE_VEGALITE2;

function Vega3(props) {
  return React.createElement(VegaEmbed, {
    data: props.data,
    embedMode: "vega",
    version: "vega3"
  });
}

Vega3.MIMETYPE = MIMETYPE_VEGA3;