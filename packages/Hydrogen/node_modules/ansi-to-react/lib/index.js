"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ansiToInlineStyle = ansiToInlineStyle;
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectSpread"));

var React = _interopRequireWildcard(require("react"));

var _anser = require("anser");

var _escapeCarriage = require("escape-carriage");

/**
 * ansiToJson
 * Convert ANSI strings into JSON output.
 *
 * @name ansiToJSON
 * @function
 * @param {String} input The input string.
 * @return {Array} The parsed input.
 */
function ansiToJSON(input) {
  input = (0, _escapeCarriage.escapeCarriageReturn)(input);
  return (0, _anser.ansiToJson)(input, {
    json: true,
    remove_empty: true
  });
}

function ansiJSONtoStyleBundle(ansiBundle) {
  var style = {};

  if (ansiBundle.bg) {
    style.backgroundColor = "rgb(".concat(ansiBundle.bg, ")");
  }

  if (ansiBundle.fg) {
    style.color = "rgb(".concat(ansiBundle.fg, ")");
  }

  return {
    content: ansiBundle.content,
    style: style
  };
}

function ansiToInlineStyle(text) {
  return ansiToJSON(text).map(ansiJSONtoStyleBundle);
}

function linkifyBundle(bundle) {
  return (0, _objectSpread2.default)({}, bundle, {
    content: bundle.content.split(" ").reduce(function (result, word, index) {
      return (0, _toConsumableArray2.default)(result).concat([// Unless word is the first, prepend a space
      index === 0 ? "" : " ", // If word is a URL, return an <a> element
      /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/.test(word) ? React.createElement("a", {
        key: index,
        href: word,
        target: "_blank"
      }, "".concat(word)) : word]);
    }, [])
  });
}

function inlineBundleToReact(bundle, key) {
  return React.createElement("span", {
    style: bundle.style,
    key: key
  }, bundle.content);
}

function Ansi(props) {
  return React.createElement("code", {
    className: props.className
  }, props.linkify ? ansiToInlineStyle(props.children).map(linkifyBundle).map(inlineBundleToReact) : ansiToInlineStyle(props.children).map(inlineBundleToReact));
}

var _default = Ansi;
exports.default = _default;