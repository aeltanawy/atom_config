"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PlotlyNullTransform = exports.PlotlyTransform = void 0;

var _isFrozen = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/is-frozen"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _lodash = require("lodash");

/* eslint class-methods-use-this: 0 */
var NULL_MIMETYPE = "text/vnd.plotly.v1+html";
var MIMETYPE = "application/vnd.plotly.v1+json";
/*
 * As part of the init notebook mode, Plotly sneaks a <script> tag in to load
 * the plotlyjs lib. We have already loaded this though, so we "handle" the
 * transform by doing nothing and returning null.
 */

var PlotlyNullTransform = function PlotlyNullTransform() {
  return null;
};

exports.PlotlyNullTransform = PlotlyNullTransform;
PlotlyNullTransform.MIMETYPE = NULL_MIMETYPE;

var PlotlyTransform =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(PlotlyTransform, _React$Component);

  function PlotlyTransform() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, PlotlyTransform);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PlotlyTransform)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "plotDivRef", function (plotDiv) {
      _this.plotDiv = plotDiv;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getFigure", function () {
      var figure = _this.props.data;

      if (typeof figure === "string") {
        return JSON.parse(figure);
      } // The Plotly API *mutates* the figure to include a UID, which means
      // they won't take our frozen objects


      if ((0, _isFrozen.default)(figure)) {
        return (0, _lodash.cloneDeep)(figure);
      }

      var _figure$data = figure.data,
          data = _figure$data === void 0 ? {} : _figure$data,
          _figure$layout = figure.layout,
          layout = _figure$layout === void 0 ? {} : _figure$layout;
      return {
        data: data,
        layout: layout
      };
    });
    return _this;
  }

  (0, _createClass2.default)(PlotlyTransform, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Handle case of either string to be `JSON.parse`d or pure object
      var figure = this.getFigure();
      this.Plotly = require("@nteract/plotly");
      this.Plotly.newPlot(this.plotDiv, figure.data, figure.layout);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.data !== nextProps.data;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var figure = this.getFigure();
      if (!this.plotDiv) return;
      this.plotDiv.data = figure.data;
      this.plotDiv.layout = figure.layout;
      this.Plotly.redraw(this.plotDiv);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$getFigure = this.getFigure(),
          layout = _this$getFigure.layout;

      var style = {};

      if (layout && layout.height && !layout.autosize) {
        style.height = layout.height;
      } // $FlowFixMe: a normal div doesn't have the properties that plotly puts on it


      return _react.default.createElement("div", {
        ref: this.plotDivRef,
        style: style
      });
    }
  }]);
  return PlotlyTransform;
}(_react.default.Component);

exports.PlotlyTransform = PlotlyTransform;
(0, _defineProperty2.default)(PlotlyTransform, "MIMETYPE", MIMETYPE);
var _default = PlotlyTransform;
exports.default = _default;