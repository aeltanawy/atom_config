"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFragment = createFragment;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

// Note: createRange and Range must be polyfilled on older browsers with
//       https://github.com/timdown/rangy
function createFragment(html) {
  /**
   * createFragment takes in an HTML string and outputs a DOM element that is
   * treated as if it originated on the page "like normal".
   * @type {Node} - https://developer.mozilla.org/en-US/docs/Web/API/Node
   */
  // Create a range to ensure that scripts are invoked from within the HTML
  var range = document.createRange();
  var fragment = range.createContextualFragment(html);
  return fragment;
}

var HTMLDisplay =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(HTMLDisplay, _React$Component);

  function HTMLDisplay() {
    (0, _classCallCheck2.default)(this, HTMLDisplay);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(HTMLDisplay).apply(this, arguments));
  }

  (0, _createClass2.default)(HTMLDisplay, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // clear out all DOM element children
      // This matters on server side render otherwise we'll get both the `innerHTML`ed
      // version + the fragment version right after each other
      // In the desktop app (and successive loads with tools like commuter) this
      // will be a no-op
      if (!this.el) return;

      while (this.el.firstChild) {
        this.el.removeChild(this.el.firstChild);
      } // DOM element appended with a real DOM Node fragment


      this.el.appendChild(createFragment(this.props.data));
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.data !== this.props.data;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (!this.el) return; // clear out all DOM element children

      while (this.el.firstChild) {
        this.el.removeChild(this.el.firstChild);
      }

      this.el.appendChild(createFragment(this.props.data));
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      return _react.default.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: this.props.data
        },
        ref: function ref(el) {
          _this.el = el;
        }
      });
    }
  }]);
  return HTMLDisplay;
}(_react.default.Component);

exports.default = HTMLDisplay;
(0, _defineProperty2.default)(HTMLDisplay, "MIMETYPE", "text/html");