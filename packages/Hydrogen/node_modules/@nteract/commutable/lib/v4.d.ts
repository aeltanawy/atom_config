/**
 * @module commutable
 */
import { ImmutableNotebook } from "./notebook";
import { ExecutionCount, JSONObject, MultiLineString } from "./primitives";
import { OnDiskOutput } from "./outputs";
export interface CodeCell {
    cell_type: "code";
    metadata: JSONObject;
    execution_count: ExecutionCount;
    source: MultiLineString;
    outputs: OnDiskOutput[];
}
export interface MarkdownCell {
    cell_type: "markdown";
    metadata: JSONObject;
    source: MultiLineString;
}
export interface RawCell {
    cell_type: "raw";
    metadata: JSONObject;
    source: MultiLineString;
}
export declare type Cell = CodeCell | MarkdownCell | RawCell;
export interface NotebookV4 {
    cells: Cell[];
    metadata: JSONObject;
    nbformat: 4;
    nbformat_minor: number;
}
export declare function fromJS(notebook: NotebookV4): import("immutable").Record<import("./notebook").NotebookRecordParams> & Readonly<import("./notebook").NotebookRecordParams>;
/**
 * Converts an immutable representation of a notebook to a JSON representation.
 *
 * @param immnb The immutable representation of a notebook.
 *
 * @returns The JSON representation of a notebook.
 */
export declare function toJS(immnb: ImmutableNotebook): NotebookV4;
export declare function isNotebookV4(value: any): value is NotebookV4;
